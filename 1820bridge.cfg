// 1820bridge configuration file

// This value determines the granularity of the measuring system
mainloopinterval = 250;		// [ms]

// MQTT broker parameters
mqtt = {
	broker = "127.0.0.1";
	debug = false;			// only works in command line mode
	retain_default = true;			// mqtt retain setting for publish
	noreadonexit = false;	// publish noread value of all tags on exit
	clearonexit = false;		// clear all tags from mosquitto persistance store on exit
};

// MQTT subscription list - 1820 device temp channels
// the topics listed here are written to the slave whenever the broker publishes
// topic: mqtt topic to subscribe
// channel: 1820device channel nukber
// type: tag type, i=input, q=output, r=register (16bit)
// ignoreretained: true= do not write retained published value to modbus
mqtt_tags = (
	{
	topic = "vk2ray/pwr/1820/ch1";
	channel = 1;
	},
	{
	topic = "vk2ray/pwr/pl20/q1";
	address = 1;
	datatype = "q";
	},
	{
	topic = "vk2ray/pwr/pl20/q2";
	address = 2;
	datatype = "q";
	}
)

// 1820 device interface configuration
// only one interface device is allowed
interface = {
	device = "/dev/ttyNANOTEMP";	// mandatory
	baudrate = 9600;				// mandatory
// optional parameters:
};

// Updatecycles definition
// every pl tag is read in one of these cycles
// id - a freely defined unique integer which is referenced in the tag definition
// interval - the time between reading, in seconds
updatecycles = (
	{
	id = 1;
	interval = 2;	// seconds
	},
	{
	id = 2;
	interval = 20;
	},
	{
	id = 3;
	interval = 30;
	},
	{
	id = 6;
	interval = 60;
	},
	{
	id = 12;
	interval = 120;		// 2 minutes
	},
	{
	id = 30
	interval = 300;		// 5 minutes
	},
	{
	id = 60;
	interval = 600;		// 10 minutes
	},
	{
	id = 180;
	interval = 1800;	// 30 minutes
	}
)

// List of tag definitions to be updated at the indicated interval
// tag parameter description: 
// channel: the reporting channel
// update_cycle: the id of the cycle for updating and publishing this tag
// topic: mqtt topic under which to publish the value, empty string will prevent pblishing
// retain: retain value for mqtt publish
// format: printf style format for mqtt publication, NOTE: all values are type "float"
// multiplier: raw value (from slave) will be multiplied by this factor
// offset: value to be added after above multiplication
// noreadvalue: value published when modbus read fails
// noreadaction: -1 = do nothing (default), 0 = publish null 1 = publish noread value
// expiry: max number of seconds between reads, if exceeded noreadaction is executed 
tags =	(
		{
		channel = 1;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch1";
		format = "%.1f"
		},
		{
		channel = 2;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch2";
		format = "%.1f"
		},
		{
		channel = 3;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch3";
		format = "%.1f";
		},
		{
		channel = 4;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch4";
		format = "%.1f";
		},
		{
		channel = 5;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch5"
		format = "%.1f";
		},
		{
		channel = 6;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch6"
		format = "%.1f";
		},
		{
		channel = 7;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch7"
		format = "%.1f";
		},
		{
		channel = 8;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch8"
		format = "%.1f";
		},
		{
		channel = 9;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch9"
		format = "%.1f";
		},
		{
		channel = 10;
		update_cycle = 6;
		topic = "vk2ray/pwr/temp/ch10";
		format = "%.1f";
		}
);

